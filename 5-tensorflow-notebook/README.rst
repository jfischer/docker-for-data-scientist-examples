==============================================
Detached Container with Jupyter and TensorFlow
==============================================

Run a Jupyter notebook for deep learning in a TensorFlow container. Example
from https://www.tensorflow.org/tutorials/keras/classification. We use
one of the pre-built Docker images from TensorFlow.

This runs either on the CPU or the GPU. To run on your GPU, you need
to have a Linux system with an NVIDIA GPU, the NVIDIA drivers for your
card installed (see https://www.nvidia.com/Download/index.aspx?lang=en-us
to download and install),, and The NVIDIA container toolkit installed
(see https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker).
If you happen to be running PopOS, you can install the NVIDIA container
toolkit directly, via the command::

  sudo apt install nvidia-container-runtime

Scripts
-------
There are three shell scripts in this directory:
 * test_gpu.sh pulls a GPU-enabled container created by NVIDIA and attempts
   to run the ``nvidia-smi`` command within the container.
 * run.sh builds and runs the notebook in detached mode. By default, it runs
   using the CPU. For running on the GPU, add "gpu" as a command line
   argument. The GPU is only supported on Linux systems with an NVIDIA
   GPU and the appropriate drivers installed (run "nvidia-smi" to verify
   that things are correctly configured on your host system).
 * cleanup.sh deletes the container, if present, even if it is running

Accessing the Notebook
----------------------
The ``docker run`` command line uses *port mapping* to expose the port 8888 from within
the container. This is the port used by Jupyter for its HTTP server. When you run
the ``run.sh`` script, you should see something like the following::

  [I 18:13:46.878 NotebookApp] Serving notebooks from local directory: /tf
  [I 18:13:46.878 NotebookApp] The Jupyter Notebook is running at:
  [I 18:13:46.878 NotebookApp] http://3e71d25e34be:8888/?token=65e1c01bfc1b860532d20003228da9c5f2a7c2e58d55039e
  [I 18:13:46.878 NotebookApp]  or http://127.0.0.1:8888/?token=65e1c01bfc1b860532d20003228da9c5f2a7c2e58d55039e
  [I 18:13:46.879 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
  [C 18:13:46.887 NotebookApp]
  
      To access the notebook, open this file in a browser:
          file:///.local/share/jupyter/runtime/nbserver-1-open.html
      Or copy and paste one of these URLs:
          http://3e71d25e34be:8888/?token=65e1c01bfc1b860532d20003228da9c5f2a7c2e58d55039e
      or http://127.0.0.1:8888/?token=65e1c01bfc1b860532d20003228da9c5f2a7c2e58d55039e

Open the second URL (starting with ``http://127.0.0.1:8888...``) in your browser. The token is different each
time -- it is randomly generated by Jupyter for security reasons.

Once you have opened your URL, Jupyter should display two folders:

* ``5-tensorflow-notebook`` - this directory, mapped into the container
* ``tensorflow-tutorials`` - more examples provided in the original image

The notebooks in both of these directories should work. Note that only the
``5-tensorflow-notebook`` directory is mapped to the host. That means changes to
``tensorflow-tutorials`` will not be visible outside the container.  
Futhermore, under Linux, user mapping will cause all directories other than
the host mounted directory (``5-tensorflow-notebook`` to be read-only.
This is because the TensorFlow filesystem was created using a ``root`` user.

Lifetime of the Container
-------------------------
This container is running in *detached mode*. This means that it will continue
running, independent of the ``run.sh`` script. If you exit out of that script
via the Control-C key combination, the container continues in the background.
You can verify this using the ``docker ps`` command::

  $ docker ps
  CONTAINER ID        IMAGE                                       COMMAND                  CREATED             STATUS              PORTS                    NAMES
  e3be8193af08        tensorflow/tensorflow:nightly-py3-jupyter   "bash -c 'source /etâ€¦"   10 minutes ago      Up 10 minutes       0.0.0.0:8888->8888/tcp   dds-5-cpu-container

To stop the container, use: ``docker stop CONTAINER_NAME`` where CONTAINER_NAME is
dds-5-cpu-container when running on the CPU or dds-5-gpu-container when running on the GPU.
To permanently remove the container, use ``docker rm -f CONTAINER_NAME``


